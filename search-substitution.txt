处理文本的行与列

正则表达式
	元字符/语法格式
		.	匹配任何单个的字符
		*	匹配任何数目的字符
		^	匹配紧接着的正则表达式，在行的起始处
		$	匹配前面的正则表达式，在行的结尾处
		[...]	匹配方括号内的任一字符
				-	表区间
				^	反向含义，放在最开始处，其他位置无效
				meta字符会失去其特殊意义在方括号中。
				
				特殊：[*\.] 匹配*.\中的任意一个
						[]*\.] 匹配]*\.中的任意一个
						[]*\.-] 匹配]*\.-中的任意一个
		\	关闭后续字符的特殊意义，或相反
		
		+	匹配前面正则表达式的一个或多个实例
		？	匹配前面正则表达式的零个或一个实例
		|	匹配|符号前或后的正则表达式
		()	匹配括号括起来的正则表达式群
		
		{n,m} = \{n,m\}	区间表达式，匹配在它前面的单个字符重现的次数区间。\{n\} 指重现n次。\{n,\} 至少n次。n到m次。
		\(\) 保留空间。最多9个子模式存储在单个模式中。
		\n	上面提到的子模式，重复。例如：\(ab\).*\1 表示ab组合出现两次，中间可以存在任何数目的字符。
		
	字符集
		[: :]
		例如：
			[:alnum:]				[:lower:]	
			[:alpha:]				[:print:]
			[:blank:]				[:punct:]
			[:cntrl:]				[:space:]
			[:digit:]				[:upper:]
			[:graph:]				[:xdigit:]
		
	排序符号
		[. .] 给予成组的项目排列顺序的操作叫排序。
		
	等价字符集
		[= =] 用来让不同字符在匹配时视为相同字符。
	
基本正则表达式
	匹配单个字符
	后向引用
	单个表达式匹配多字符
	文本匹配锚点
		锚点
			^ $
	优先级
		[..] [==] [::]
		\metacharacter 转移字符
		[]
		\(\) \digit	字表达式与后向引用
		* \{\} 	前置单个字符重现的正则表达式
		无符号	连续
		^$	锚点
		
扩展正则表达式
	匹配的个字符
	后向引用不存在
	匹配单个表达式与多个正则表达式
		直接使用{5} 表示5次，不用加\
	交替
		管道字符 | 或者的意思。
		优先级最低
	分组
	停驻文本匹配
		^$永远是meta字符，除了方括号外。
	优先级
		[..] [==] [::]
		\metacharacter 转移字符
		[]
		()			分组
		* + ？ {} 	前置单个字符重现的正则表达式
		无符号	连续
		^$	锚点
		|	交替

正则表达式的扩展
	很多程序提供正则表达式语法扩展。一般是采用反斜杠加一个字符，形成新的运算符。
	例如： \< \> 匹配单词的开头与结尾，单词：字母、数字和下划线组成。
	
	GUN定义的
		\w	任何单词
		\W	非单词
		\< \> 单词的起始与结尾
		\b	单词的起始或结尾处所找到的空字符串
		\B	两个单词组成字符之间的空字符串
		
程序与正则表达式
	
		

1、查找文本
	以前
	grep（使用基本的正则表达式BRE）
	egrep（支持扩展正则表达式ERE）
	fgrep（fast grep，匹配固定的字符串而非正则表达式）
	现在都用grep
	

grep
	-E	使用ERE
	-F	使用固定字符串匹配
	-f file	从读取文件中获取规则
	-i	忽略大小写
	-l	列出匹配模式的文件名称，而不是打印匹配的行
	-v	显示不匹配的行
	
	打印匹配行的前后行
	-A num	后
	-B num	前
	-C num	前后
	
2、正则表达式
	grep——寻找匹配文本行
	sed流编辑器——改变输入的流，主要用于替换
	awk、python、ruby——字符串处理程序语言
	more、page、pg、less——文件查看程序
	ed、vim、vi、emacs——文本编辑器
	
	